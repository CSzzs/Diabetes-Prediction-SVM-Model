# -*- coding: utf-8 -*-
"""Diabeties_prediction_SVM_ML _Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fKk2bRSPdJrWM-OLiSxpp_zOoHkZnBbu

# Importing Libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""# Dataset Importing and Analysis

## Importing the Dataset
"""

Diabeties_data = pd.read_csv('/content/diabetes.csv')
Diabeties_data.head()

"""## Dataset Inspection"""

Diabeties_data.shape

"""### statical measure of the dataset"""

Diabeties_data.describe()

Diabeties_data['Outcome'].value_counts()

Diabeties_data.groupby('Outcome').mean()

#seperating data and labels
x = Diabeties_data.drop(columns = 'Outcome', axis=1)
y = Diabeties_data['Outcome']

print(x)
print(y)

"""### Data standardization"""

scaler = StandardScaler()
scaler.fit(x)
standardized_data = scaler.transform(x)

print(standardized_data)

x = standardized_data

print(x)
print(y)

"""### Data splitting for training and testing"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size =0.2, stratify=y, random_state=2 )

print(x.shape, x_train.shape, x_test.shape)

"""# Model Training

"""

classifier = svm.SVC(kernel='linear')

# fitting training data to the classifier
classifier.fit(x_train, y_train)

"""# Model Evaluation

### Accuracy on training data
"""

x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print('accuracy on training data : ', training_data_accuracy)

x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)
print('accuracy on testing data : ', test_data_accuracy)

"""# Building a Predictive system"""

input_data = (1,103,30,38,83,43.3,0.183,33)

#converting data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#Data standardizatain
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('the person is not diabetic')
else:
  print('the person is diabetic')